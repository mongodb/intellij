name: Draft release

env:
  ORG_GRADLE_CACHING: false
  ORG_GRADLE_PARALLEL: false
  ORG_GRADLE_DAEMON: false

on:
  workflow_dispatch:
    inputs:
      versionBump:
        description: "Version bump"
        type: choice
        required: true
        default: "patch"
        options:
          - patch
          - minor
          - major
          - exact-version

      exactVersion:
        description: 'Exact version: (Only effective selecting "exact-version" as version bump)'
        required: false

      dryRun:
        description: 'Dry Run: (Will run everything but will not create the release on GH nor publish to the marketplace)'
        type: boolean
        required: false
        default: false

permissions:
  contents: write

jobs:
  prepare-release:
    name: "Prepare Release"
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # 1.3.1
        with:
          tool-cache: false
          large-packages: false

      - uses: mongodb-js/devtools-shared/actions/setup-bot-token@main
        id: app-token
        with:
          app-id: ${{ vars.DEVTOOLS_BOT_APP_ID }}
          private-key: ${{ secrets.DEVTOOLS_BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Determine Next Version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          VERSION_BUMP=${{ github.event.inputs.versionBump }}

          if [[ "$VERSION_BUMP" == "major" || "$VERSION_BUMP" == "minor" || "$VERSION_BUMP" == "patch" ]]; then
            ./gradlew --quiet --console=plain versionBump -Pmode="$VERSION_BUMP"
          else
            ./gradlew --quiet --console=plain versionBump -PexactVersion="${{ github.event.inputs.exactVersion }}"
          fi

          NEXT_VERSION=$(./gradlew --quiet --console=plain getVersion)
          echo "RELEASE_TAG=v${NEXT_VERSION}" >> "$GITHUB_ENV"

      - name: Validate release tag
        shell: bash
        run: |
          if [ -z "${RELEASE_TAG}" ]; then
            echo "RELEASE_TAG is not set or is empty"
            exit 1
          fi

          if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Error: Tag $RELEASE_TAG already existing"
            echo "If you are trying to re-create a draft release with this version, please delete the release and the tag first."
            echo "If this version has already been release consider using a different one."
            exit 1
          fi
      - name: Verify Checks in main
        run: |
          ./gradlew --quiet --console=plain "mainStatus"

      - name: Patch Plugin XML
        run: |
          ./gradlew --quiet --console=plain ":packages:jetbrains-plugin:patchPluginXml"

      - name: Verify Plugin
        env:
          BUILD_SEGMENT_API_KEY: ''
        run: |
          ./gradlew --quiet --console=plain ":packages:jetbrains-plugin:verifyPlugin"

      - name: Sign and Publish Plugin in Beta
        if: ${{ github.event.inputs.dryRun != 'true' }}
        env:
          JB_PUBLISH_CHANNEL: "beta"
          BUILD_SEGMENT_API_KEY: ${{ secrets.BUILD_SEGMENT_API_KEY }}
          JB_PUBLISH_TOKEN: ${{ secrets.JB_PUBLISH_TOKEN }}
          JB_CERTIFICATE_CHAIN: ${{ secrets.JB_CERTIFICATE_CHAIN }}
          JB_PRIVATE_KEY: ${{ secrets.JB_PRIVATE_KEY }}
          JB_PRIVATE_KEY_PASSWORD: ${{ secrets.JB_PRIVATE_KEY_PASSWORD }}
        run: |
          ./gradlew --quiet --console=plain ":packages:jetbrains-plugin:publishPlugin"

      - name: Patch Changelog
        id: patch-changelog
        run: |
          ./gradlew --quiet --console=plain ":packages:jetbrains-plugin:patchChangelog"
          VERSION=$(./gradlew getVersion --quiet --console=plain)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Draft Release
        shell: bash
        if: ${{ github.event.inputs.dryRun != 'true' }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          set -e
          echo Creating draft release for: "${RELEASE_TAG}"

          git add .
          git commit --no-verify -m "Release ${RELEASE_TAG}"
          git tag ${RELEASE_TAG}
          git push origin ${RELEASE_TAG}

          GIT_REF=$(git rev-parse ${RELEASE_TAG})
          ls packages/jetbrains-plugin/build/distributions/jetbrains-plugin.zip

          CHANGELOG=$(./gradlew --quiet --console=plain :packages:jetbrains-plugin:getChangelog)

          gh release create "${RELEASE_TAG}" \
            --title "${RELEASE_TAG}" \
            --notes "${CHANGELOG}" \
            --target "${GIT_REF}" \
            --draft \
            packages/jetbrains-plugin/build/distributions/jetbrains-plugin.zip

      - name: "Notify Draft Release"
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # 2.1.0
        if: ${{ github.event.inputs.dryRun != 'true' && success() }}
        with:
          payload: |
            {
              "text": "Released version ${{ steps.patch-changelog.outputs.version }} in the Beta Channel.",
            }
          webhook: ${{ secrets.INTELLIJ_DEVEL_WEBHOOK_URL }}
          webhook-type: incoming-webhook
